using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using RkoOuttaNowhere.Levels;

namespace RkoOuttaNowhere
{
    //Add upgrades here in powers of two
    //1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536, etc.
    [Flags]
    public enum Upgrades
    {
        None = 0
    }

    public class RKOGame
    {
        private static RKOGame _instance;
        /// <summary>
        /// Singleton class instance
        /// </summary>
        public static RKOGame Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new RKOGame();
                }
                return _instance;
            }
        }

<<<<<<< HEAD
        private int _currency,
                    _health,
                    _currentWave,
                    _finalWave;

        private Level _currentLevel;

        //TODO: Add other stats
=======
        private int _currency, 
                    _health, 
                    _currentWave,
                    _currentWorld,
                    _finalWave, 
                    _currentLevel,
                    _highestCompletedLevel;
                    //add upgrades, stats, 
>>>>>>> b0e0b30f7591acecb6c3883b1f6fe23493c16121

        private Screens.ScreenType _lastScreen;
        public Screens.ScreenType LastScreen
        {
            get { return _lastScreen; }
            set { _lastScreen = value; }
        }
        /// <summary>
        /// constructor for Game class, sets initial values for game object
        /// </summary>
        /// <param name="curr"> starting curency </param>
<<<<<<< HEAD
        public RKOGame(int curr, Level loadLevel = null)
        {
            _currency = curr;
            _health = 0;
            _currentWave = 0;
=======
        private RKOGame()
        {
            _currency = 100;
            _health = int.MaxValue;
            _currentLevel = 0;
            _currentWave = 0;
            //finalWave = 30;
>>>>>>> b0e0b30f7591acecb6c3883b1f6fe23493c16121

            if(loadLevel != null)
            {
                SetupLevel(loadLevel);
            }
        }

<<<<<<< HEAD
        public int Currency { get { return _currency; } set { _currency += value; } }
        public int Health { get { return _health; } set { _health = value; } }
        public int WavesLeft { get { return (_finalWave - _currentWave); } }
        public Level CurrentLevel { get { return _currentLevel; } set { _currentLevel = value; } }

        /// <summary>
        /// Setup the given level with initial values and get ready to start
        /// </summary>
        /// <param name="newLevel">Level to begin</param>
        public void SetupLevel(Level newLevel)
        {
            _currentLevel = newLevel;
            _currentWave = 0;
            //TODO: _finalWave = _currentLevel.getWaveCount;

            //TODO: make sure that everything has the right position
        }
=======
        public int getCurrency { get { return _currency; } set { _currency += value; } }
        public int getHealth { get { return _health; } set { _health = value; } }
        public int getWavesLeft { get { return (_finalWave - _currentWave); } }
        public int getCurrentLevel { get { return _currentLevel; } set { _currentLevel = value; } }
        public int getCurrentWorld { get { return _currentWorld; } set { _currentWorld = value; } }
        public int getHighestCompletedLevel { get { return _highestCompletedLevel; } set { _highestCompletedLevel = value; } }
>>>>>>> b0e0b30f7591acecb6c3883b1f6fe23493c16121

        /// <summary>
        /// Perform cleanup operations after a level is completed or the player dies
        /// </summary>
        public void CleanLevel()
        {
            //TODO: Implement CleanLevel()
        }

        /// <summary>
        /// Effectively the update method of most of the main game features. This
        /// Is where cooldowns will occur and AI's will tick
        /// </summary>
        public void Update()
        {
            
        }

        /// <summary>
        /// Draw the elements on the game screen
        /// </summary>
        public void Draw()
        {

        }

    }
}
